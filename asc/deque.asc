

DEQUE


__ July 7, 2015July 20, 2015 __ An

_Deque_ (cara sebutan ‘deck’) boleh menggunakan kaedah _first in, first
out_ (FIFO) dan _last in, first out_ (LIFO). Cara untuk menggunakan
kaedah FIFO sama sahaja dengan menggunakan _queue_, jadi kita akan lihat
kaedah LIFO pula. Class yang menggunakan interface _Deque_ ialah
_ArrayDeque_ dan _LinkedList_.

------------------------------------------------------------------------

ArrayDeque

Kaedah LIFO boleh diibaratkan seperti membuat burger. Kita letak
bahagian-bahagian burger bermula dari bawah ke atas. Apabila kita hendak
lihat daging apa, kita selak roti yang di atas.

Contoh kaedah LIFO menggunakan _ArrayDeque_:

package datastructure; import java.util.ArrayDeque; import
java.util.Deque; public class ContohDeque { public static void
main(String[] args) { Deque<String> burger = new ArrayDeque<>();
    burger.push("roti"); burger.push("sayur"); burger.push("daging");
    burger.push("roti"); System.out.println("Susunan burger:"); for (String
    partBurger : burger) { System.out.println(partBurger); }
    System.out.println("Oops, lupa letak sos!"); String pegang =
    burger.pop(); // keluarkan roti paling atas burger.push("sos +
    mayonis"); // tambah sos burger.push(pegang); // letak balik roti
    System.out.println("Sususan burger yang baru:"); for (String partBurger
    : burger) { System.out.println(partBurger); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.ArrayDeque;         |
    |                                      |                                      |
    | 4                                    | import java.util.Deque;              |
    |                                      |                                      |
    | 5                                    |                                      |
    |                                      |                                      |
    | 6                                    | public class ContohDeque {           |
    |                                      |                                      |
    | 7                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 8                                    |                                      |
    |                                      |         Deque<String> burger = new   |
    | 9                                    | ArrayDeque<>();                      |
    |                                      |                                      |
    | 10                                   |         burger.push("roti");         |
    |                                      |                                      |
    | 11                                   |         burger.push("sayur");        |
    |                                      |                                      |
    | 12                                   |         burger.push("daging");       |
    |                                      |                                      |
    | 13                                   |         burger.push("roti");         |
    |                                      |                                      |
    | 14                                   |                                      |
    |                                      |                                      |
    | 15                                   |         System.out.println("Susunan  |
    |                                      | burger:");                           |
    | 16                                   |                                      |
    |                                      |         for (String partBurger :     |
    | 17                                   | burger) {                            |
    |                                      |                                      |
    | 18                                   |             System.out.println(partB |
    |                                      | urger);                              |
    | 19                                   |                                      |
    |                                      |         }                            |
    | 20                                   |                                      |
    |                                      |                                      |
    | 21                                   |                                      |
    |                                      |         System.out.println("Oops,    |
    | 22                                   | lupa letak sos!");                   |
    |                                      |                                      |
    | 23                                   |         String pegang =              |
    |                                      | burger.pop();   // keluarkan roti    |
    | 24                                   | paling atas                          |
    |                                      |                                      |
    | 25                                   |         burger.push("sos +           |
    |                                      | mayonis");   // tambah sos           |
    | 26                                   |                                      |
    |                                      |         burger.push(pegang);         |
    | 27                                   |     //                               |
    |                                      | letak balik roti                     |
    | 28                                   |                                      |
    |                                      |                                      |
    | 29                                   |                                      |
    |                                      |         System.out.println("Sususan  |
    |                                      | burger yang baru:");                 |
    |                                      |                                      |
    |                                      |         for (String partBurger :     |
    |                                      | burger) {                            |
    |                                      |                                      |
    |                                      |             System.out.println(partB |
    |                                      | urger);                              |
    |                                      |                                      |
    |                                      |         }                            |
    |                                      |                                      |
    |                                      |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    Method yang digunakan untuk LIFO ialah:

    -   _push()_ – untuk memasukkan data di hujung/atas
    -   _pop()_ – keluarkan data di hujung/atas
    -   _peek()_ – untuk akses data di hujung/atas tanpa keluarkan data
    tersebut

    Method yang boleh digunakan untuk FIFO pula adalah sama seperti _Queue_
    iaitu _offer()_, _poll()_, dan _peek()_.

    ------------------------------------------------------------------------

    LinkedList

    Cara gunanya sama sahaja dengan _ArrayDeque_. Secara umumnya,
    _ArrayDeque_ lebih efisyen berbanding _LinkedList_.
