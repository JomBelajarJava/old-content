

SET


__ July 6, 2015July 20, 2015 __ An

_Set_ boleh digunakan untuk menyimpan data yang lain dari yang lain.
Jika ada yang sama, _Set_ akan menyimpan satu sahaja. Class yang
menggunakan interface _Set_ antaranya ialah _HashSet_, _TreeSet_, dan
_LinkedHashSet_.

------------------------------------------------------------------------

HashSet

_HashSet_ digunakan jika kita tidak kisah bagaimana kedudukan data di
dalam _Set_. Dari segi performance, _HashSet_ adalah yang terbaik.

Contoh penggunaannya:

package datastructure; import java.util.HashSet; import java.util.Set;
public class ContohSet { public static void main(String[] args) {
Set<String> kuih = new HashSet<>(); kuih.add("karipap");
    kuih.add("donat"); kuih.add("kuih lapis"); kuih.add("karipap"); for
    (String k : kuih) { System.out.println(k); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.HashSet;            |
    |                                      |                                      |
    | 4                                    | import java.util.Set;                |
    |                                      |                                      |
    | 5                                    |                                      |
    |                                      |                                      |
    | 6                                    | public class ContohSet {             |
    |                                      |                                      |
    | 7                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 8                                    |                                      |
    |                                      |         Set<String> kuih = new       |
    | 9                                    | HashSet<>();                         |
    |                                      |                                      |
    | 10                                   |         kuih.add("karipap");         |
    |                                      |                                      |
    | 11                                   |         kuih.add("donat");           |
    |                                      |                                      |
    | 12                                   |         kuih.add("kuih lapis");      |
    |                                      |                                      |
    | 13                                   |         kuih.add("karipap");         |
    |                                      |                                      |
    | 14                                   |                                      |
    |                                      |                                      |
    | 15                                   |         for (String k : kuih) {      |
    |                                      |                                      |
    | 16                                   |             System.out.println(k);   |
    |                                      |                                      |
    | 17                                   |         }                            |
    |                                      |                                      |
    | 18                                   |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    Hasilnya hanya satu _“karipap”_ sahaja yang ada dalam Set tersebut
    walaupun kita masukkan dua. Perhatikan juga kedudukan kuih tidak
    mengikut urutan seperti yang kita masukkan.

    ------------------------------------------------------------------------

    TreeSet

    _TreeSet_ akan menyusun data di dalamnya mengikut nilai data tersebut,
    contohnya jika nombor akan mengikut urutan angka naik, jika String akan
    mengikut huruf:

    package datastructure; import java.util.Set; import java.util.TreeSet;
    public class ContohSet { public static void main(String[] args) {
    Set<Integer> nombor = new TreeSet<>(); nombor.add(10); nombor.add(10);
    nombor.add(5); nombor.add(12); for (Integer k : nombor) {
    System.out.println(k); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.Set;                |
    |                                      |                                      |
    | 4                                    | import java.util.TreeSet;            |
    |                                      |                                      |
    | 5                                    |                                      |
    |                                      |                                      |
    | 6                                    | public class ContohSet {             |
    |                                      |                                      |
    | 7                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 8                                    |                                      |
    |                                      |         Set<Integer> nombor = new    |
    | 9                                    | TreeSet<>();                         |
    |                                      |                                      |
    | 10                                   |         nombor.add(10);              |
    |                                      |                                      |
    | 11                                   |         nombor.add(10);              |
    |                                      |                                      |
    | 12                                   |         nombor.add(5);               |
    |                                      |                                      |
    | 13                                   |         nombor.add(12);              |
    |                                      |                                      |
    | 14                                   |                                      |
    |                                      |                                      |
    | 15                                   |         for (Integer k : nombor) {   |
    |                                      |                                      |
    | 16                                   |             System.out.println(k);   |
    |                                      |                                      |
    | 17                                   |         }                            |
    |                                      |                                      |
    | 18                                   |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    Dari segi performance, _TreeSet_ adalah yang paling lambat.

    ------------------------------------------------------------------------

    LinkedHashSet

    _LinkedHashSet_ pula menyusun data mengikut urutan sebagaimana
    urutan kita memasukkan data:

    package datastructure; import java.util.LinkedHashSet; import
    java.util.Set; public class ContohSet { public static void main(String[]
    args) { Set<Integer> nombor = new LinkedHashSet<>(); nombor.add(10);
    nombor.add(10); nombor.add(5); nombor.add(12); for (Integer k : nombor)
    { System.out.println(k); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.LinkedHashSet;      |
    |                                      |                                      |
    | 4                                    | import java.util.Set;                |
    |                                      |                                      |
    | 5                                    |                                      |
    |                                      |                                      |
    | 6                                    | public class ContohSet {             |
    |                                      |                                      |
    | 7                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 8                                    |                                      |
    |                                      |         Set<Integer> nombor = new    |
    | 9                                    | LinkedHashSet<>();                   |
    |                                      |                                      |
    | 10                                   |         nombor.add(10);              |
    |                                      |                                      |
    | 11                                   |         nombor.add(10);              |
    |                                      |                                      |
    | 12                                   |         nombor.add(5);               |
    |                                      |                                      |
    | 13                                   |         nombor.add(12);              |
    |                                      |                                      |
    | 14                                   |                                      |
    |                                      |                                      |
    | 15                                   |         for (Integer k : nombor) {   |
    |                                      |                                      |
    | 16                                   |             System.out.println(k);   |
    |                                      |                                      |
    | 17                                   |         }                            |
    |                                      |                                      |
    | 18                                   |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    Dari segi performance, _LinkedHashSet_ hampir sama laju dengan
    _HashSet_.

    ------------------------------------------------------------------------

    Buang duplicate

    _Set_ boleh digunakan untuk membuang duplicate daripada _data structure_
    yang lain.

    Contoh membuang duplicate dalam _array_:

    package datastructure; import java.util.Arrays; import
    java.util.HashSet; import java.util.Set; public class ContohSet { public
    static void main(String[] args) { Integer[] nombor = {1, 1, 1, 1, 2, 3,
    4, 4, 4, 5, 6, 6, 6, 6, 7}; Set<Integer> setNombor = new
    HashSet<>(Arrays.asList(nombor)); Integer[] nomborTanpaDuplicate =
    setNombor.toArray(new Integer[setNombor.size()]); for (Integer n :
    nomborTanpaDuplicate) { System.out.println(n); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.Arrays;             |
    |                                      |                                      |
    | 4                                    | import java.util.HashSet;            |
    |                                      |                                      |
    | 5                                    | import java.util.Set;                |
    |                                      |                                      |
    | 6                                    |                                      |
    |                                      |                                      |
    | 7                                    | public class ContohSet {             |
    |                                      |                                      |
    | 8                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 9                                    |                                      |
    |                                      |         Integer[] nombor = {1, 1, 1, |
    | 10                                   | 1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7}; |
    |                                      |                                      |
    | 11                                   |         Set<Integer> setNombor = new |
    |                                      | HashSet<>(Arrays.asList(nombor));    |
    | 12                                   |                                      |
    |                                      |         Integer[]                    |
    | 13                                   | nomborTanpaDuplicate =               |
    |                                      | setNombor.toArray(new                |
    | 14                                   | Integer[setNombor.size()]);          |
    |                                      |                                      |
    | 15                                   |                                      |
    |                                      |                                      |
    | 16                                   |         for (Integer n :             |
    |                                      | nomborTanpaDuplicate) {              |
    | 17                                   |                                      |
    |                                      |             System.out.println(n);   |
    |                                      |                                      |
    |                                      |         }                            |
    |                                      |                                      |
    |                                      |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    Contoh membuang duplicate dalam _List_:

    package datastructure; import java.util.ArrayList; import
    java.util.HashSet; import java.util.List; import java.util.Set; public
    class ContohSet { public static void main(String[] args) { List<String>
    nama = new ArrayList<>(); nama.add("ali"); nama.add("ali");
    nama.add("ali"); Set<String> namaSet = new HashSet<>(nama);
    nama.clear(); nama.addAll(namaSet); for (String n : nama) {
    System.out.println(n); } } }

    +--------------------------------------+--------------------------------------+
    | 1                                    | package datastructure;               |
    |                                      |                                      |
    | 2                                    |                                      |
    |                                      |                                      |
    | 3                                    | import java.util.ArrayList;          |
    |                                      |                                      |
    | 4                                    | import java.util.HashSet;            |
    |                                      |                                      |
    | 5                                    | import java.util.List;               |
    |                                      |                                      |
    | 6                                    | import java.util.Set;                |
    |                                      |                                      |
    | 7                                    |                                      |
    |                                      |                                      |
    | 8                                    | public class ContohSet {             |
    |                                      |                                      |
    | 9                                    |     public static void main(String[] |
    |                                      | args) {                              |
    | 10                                   |                                      |
    |                                      |         List<String> nama = new      |
    | 11                                   | ArrayList<>();                       |
    |                                      |                                      |
    | 12                                   |         nama.add("ali");             |
    |                                      |                                      |
    | 13                                   |         nama.add("ali");             |
    |                                      |                                      |
    | 14                                   |         nama.add("ali");             |
    |                                      |                                      |
    | 15                                   |                                      |
    |                                      |                                      |
    | 16                                   |         Set<String> namaSet = new    |
    |                                      | HashSet<>(nama);                     |
    | 17                                   |                                      |
    |                                      |         nama.clear();                |
    | 18                                   |                                      |
    |                                      |         nama.addAll(namaSet);        |
    | 19                                   |                                      |
    |                                      |                                      |
    | 20                                   |                                      |
    |                                      |         for (String n : nama) {      |
    | 21                                   |                                      |
    |                                      |             System.out.println(n);   |
    | 22                                   |                                      |
    |                                      |         }                            |
    | 23                                   |                                      |
    |                                      |     }                                |
    |                                      |                                      |
    |                                      | }                                    |
    +--------------------------------------+--------------------------------------+

    
